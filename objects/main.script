ud_camera = hash("updown_camera")

local cameras_load = false
local mask_putted = false
local in_menu = true
local time_multiply = 2
local time_from_game_start = 0
local night_save_name = "night.floppa_saves"
local toxic_level = 0; -- max: 100
local toxic_level_adder = 10
local toxic_level_subs = 5

jumpscare_settings = {
	duration = 0.5;
	pos_add = -350;
	scale_mul = 4;
}

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "disable")
	msg.post("/timer", "disable")
	check_of_saves()

	msg.post("/scripts#Menu", "load")
	msg.post("/scripts#Menu", "init")
	msg.post("/scripts#Menu", "enable")
end

function final(self)
	
end

function update(self, dt)
	timer_update(self, dt)
	toxic_level_update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("play_jumpscare") then
		play_jumpscare(message.sprite_name)
	end

	if message_id == hash("continue_game") then
		continue_game()
	elseif message_id == hash("new_game") then
		start_new_game()
	elseif message_id == hash("options_for_game") then
		options_of_game()
	elseif message_id == hash("exit_from_game") then
		exit_from_game()
	end
end

function on_input(self, action_id, action)
	if action_id == ud_camera and action.pressed then
		if not cameras_load and not mask_putted then
			cameras_load = true
			msg.post("/scripts#Office", "disable")
			msg.post("/scripts#Cameras", "enable")
		elseif cameras_load and not mask_putted then
			cameras_load = false
			msg.post("/scripts#Cameras", "disable")
			msg.post("/scripts#Office", "enable")
		end
	end

	if not action_id and not in_menu then put_on_mask(action.y) end
end





function init_collections()
	msg.post("/scripts#Animatronics", "load")
	msg.post("/scripts#Animatronics", "init")
	msg.post("/scripts#Animatronics", "enable")

	msg.post("/scripts#Office", "load")
	msg.post("/scripts#Office", "init")
	msg.post("/scripts#Office", "enable")

	msg.post("/scripts#Cameras", "load")
	msg.post("/scripts#Cameras", "init")
end

function play_jumpscare(sprite_name)
	if mask_putted then
		msg.post("animatronics:/animatronics#floppa_in_bucket", "mask_used")
		return
	end
	msg.post("/jumpscare", "enable")
	sprite.play_flipbook("/jumpscare#jumpscare", sprite_name)
	local pos_y_to = go.get("/jumpscare", "position.y") + jumpscare_settings.pos_add
	go.animate(
			"/jumpscare",
			"position.y",
			go.PLAYBACK_ONCE_FORWARD,
			pos_y_to,
			go.EASING_INBACK,
			jumpscare_settings.duration,
			0,
			function()
				timer.delay(3, false, back_to_menu)
			end)

	local scale_to = go.get("/jumpscare", "scale")
	scale_to.x = scale_to.x * jumpscare_settings.scale_mul
	scale_to.y = scale_to.y * jumpscare_settings.scale_mul
	scale_to.z = scale_to.z * jumpscare_settings.scale_mul
	go.animate(
			"/jumpscare",
			"scale",
			go.PLAYBACK_ONCE_FORWARD,
			scale_to,
			go.EASING_OUTSINE,
			jumpscare_settings.duration)
end

local prev_pos = 1000
---@param mouse_y_pos number
function put_on_mask(mouse_y_pos)
	local _,window_y = window.get_size()
	if mouse_y_pos < window_y / 10 and prev_pos >= window_y / 10 then
		if not mask_putted and not cameras_load then
			go.animate(	"/puted_on_musk",
					"position.y",
					go.PLAYBACK_ONCE_FORWARD,
					0,
					go.EASING_LINEAR,
					0.1)
			mask_putted = not mask_putted
		elseif mask_putted and not cameras_load then
			go.animate(	"/puted_on_musk",
					"position.y",
					go.PLAYBACK_ONCE_FORWARD,
					1000,
					go.EASING_LINEAR,
					0.1)
			mask_putted = not mask_putted
		end
	end
	prev_pos = mouse_y_pos
end

function back_to_menu()
	msg.post("/scripts#Office", "unload")
	msg.post("/scripts#Cameras", "unload")
	msg.post("/scripts#Animatronics", "unload")

	local jumpscare_pos = go.get_position("/jumpscare")
	jumpscare_pos.x = 640
	jumpscare_pos.y = 480
	go.set_position(jumpscare_pos,"/jumpscare")
	local jumpscare_scale = go.get_scale("/jumpscare")
	jumpscare_scale.x = jumpscare_scale.x / jumpscare_settings.scale_mul
	jumpscare_scale.y = jumpscare_scale.y / jumpscare_settings.scale_mul
	jumpscare_scale.z = jumpscare_scale.z / jumpscare_settings.scale_mul
	go.set_scale(jumpscare_scale,"/jumpscare")

	local po_mask_pos = go.get_position("/jumpscare")
	po_mask_pos.x = 0
	po_mask_pos.y = 1000
	go.set_position(po_mask_pos,"/puted_on_musk")

	time_from_game_start = 0

	toxic_level = 0

	cameras_load = false
	mask_putted = false

	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "disable")
	msg.post("/timer", "disable")

	msg.post("/scripts#Menu", "load")
	msg.post("/scripts#Menu", "init")
	msg.post("/scripts#Menu", "enable")
	in_menu = true
end

function continue_game()
	start_new_game()

end

function start_new_game()
	in_menu = false
	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "enable")
	msg.post("/timer", "enable")

	msg.post("/scripts#Menu", "unload")
	init_collections()
end

function options_of_game()

end

function exit_from_game()
	sys.exit(0)
end

function timer_update(self, dt)
	if not in_menu then
		time_from_game_start = time_from_game_start + dt

		local hours = math.floor(time_from_game_start / 60 * time_multiply)
		local minutes_first = math.floor(time_from_game_start * time_multiply / 10) % 6
		local minutes_second = math.floor(
				time_from_game_start * time_multiply - math.floor(time_from_game_start * time_multiply / 10) * 10
		)
		self.prev_minutes_second = self.prev_minutes_second or 0

		if self.prev_minutes_second ~= minutes_second then
			label.set_text("/timer#timer", ("%d%d:%d%d"):format(
					0,
					hours,
					minutes_first,
					minutes_second
			))
			self.prev_minutes_second = minutes_second
		end

		if hours == 6 then
			local night = sys.load(night_save_name).night
			if night == 5 then night = 4 end
			sys.save(night_save_name, {night = night + 1})
			back_to_menu()
		end
	end
end

function check_of_saves()
	if not sys.load(night_save_name).night then
		sys.save(night_save_name, {night = 1})
		print("Work")
	end
end

function toxic_level_update(dt)
	if mask_putted then
		toxic_level = toxic_level + toxic_level_adder * dt
		msg.post("office:/toxic_level#toxic_level", "toxic_level_change",{toxic_level = toxic_level})
	elseif not mask_putted and not in_menu then
		toxic_level = toxic_level - ((toxic_level < 0) and 0 or toxic_level_subs * dt)
		msg.post("office:/toxic_level#toxic_level", "toxic_level_change",{toxic_level = toxic_level})
	end

	if toxic_level >= 100 then
		back_to_menu()
	end
end