ud_camera = hash("updown_camera")

local cameras_load = false
local mask_putted = false
local in_menu = false

jumpscare_settings = {
	duration = 0.5;
	pos_add = -350;
	scale_mul = 4;
}

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "disable")

	msg.post("/scripts#Menu", "load")
	msg.post("/scripts#Menu", "init")
	msg.post("/scripts#Menu", "enable")
end

function final(self)
	
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("play_jumpscare") then
		play_jumpscare(message.sprite_name)
	end

	if message_id == hash("continue_game") then
		continue_game()
	elseif message_id == hash("new_game") then
		start_new_game()
	elseif message_id == hash("options_for_game") then
		options()
	elseif message_id == hash("exit_from_game") then
		exit_from_game()
	end
end

function on_input(self, action_id, action)
	if action_id == ud_camera and action.pressed then
		if not cameras_load and not mask_putted then
			cameras_load = true
			msg.post("/scripts#Office", "disable")
			msg.post("/scripts#Cameras", "enable")
		elseif cameras_load and not mask_putted then
			cameras_load = false
			msg.post("/scripts#Cameras", "disable")
			msg.post("/scripts#Office", "enable")
		end
	end

	if not action_id then put_on_mask(action.y) end
end





function init_collections()
	msg.post("/scripts#Animatronics", "load")
	msg.post("/scripts#Animatronics", "init")
	msg.post("/scripts#Animatronics", "enable")

	msg.post("/scripts#Office", "load")
	msg.post("/scripts#Office", "init")
	msg.post("/scripts#Office", "enable")

	msg.post("/scripts#Cameras", "load")
	msg.post("/scripts#Cameras", "init")
end

function play_jumpscare(sprite_name)
	if mask_putted then
		msg.post("animatronics:/animatronics#floppa_in_bucket", "mask_used")
		return
	end
	msg.post("/jumpscare", "enable")
	sprite.play_flipbook("/jumpscare#jumpscare", sprite_name)
	local pos_y_to = go.get("/jumpscare", "position.y") + jumpscare_settings.pos_add
	go.animate(
			"/jumpscare",
			"position.y",
			go.PLAYBACK_ONCE_FORWARD,
			pos_y_to,
			go.EASING_INBACK,
			jumpscare_settings.duration,
			0,
			function()
				timer.delay(3, false, back_to_menu)
			end)

	local scale_to = go.get("/jumpscare", "scale")
	scale_to.x = scale_to.x * jumpscare_settings.scale_mul
	scale_to.y = scale_to.y * jumpscare_settings.scale_mul
	scale_to.z = scale_to.z * jumpscare_settings.scale_mul
	go.animate(
			"/jumpscare",
			"scale",
			go.PLAYBACK_ONCE_FORWARD,
			scale_to,
			go.EASING_OUTSINE,
			jumpscare_settings.duration)
end

local prev_pos = 1000
---@param mouse_y_pos number
function put_on_mask(mouse_y_pos)
	local _,window_y = window.get_size()
	if mouse_y_pos < window_y / 10 and prev_pos >= window_y / 10 then
		if not mask_putted and not cameras_load then
			go.animate(	"/puted_on_musk",
					"position.y",
					go.PLAYBACK_ONCE_FORWARD,
					0,
					go.EASING_LINEAR,
					0.1)
			mask_putted = not mask_putted
		elseif mask_putted and not cameras_load then
			go.animate(	"/puted_on_musk",
					"position.y",
					go.PLAYBACK_ONCE_FORWARD,
					1000,
					go.EASING_LINEAR,
					0.1)
			mask_putted = not mask_putted
		end
	end
	prev_pos = mouse_y_pos
end

function back_to_menu()
	msg.post("/scripts#Office", "unload")
	msg.post("/scripts#Cameras", "unload")
	msg.post("/scripts#Animatronics", "unload")

	local jumpscare_pos = go.get_position("/jumpscare")
	jumpscare_pos.x = 640
	jumpscare_pos.y = 480
	go.set_position(jumpscare_pos,"/jumpscare")
	local jumpscare_scale = go.get_scale("/jumpscare")
	jumpscare_scale.x = jumpscare_scale.x / jumpscare_settings.scale_mul
	jumpscare_scale.y = jumpscare_scale.y / jumpscare_settings.scale_mul
	jumpscare_scale.z = jumpscare_scale.z / jumpscare_settings.scale_mul
	go.set_scale(jumpscare_scale,"/jumpscare")

	local po_mask_pos = go.get_position("/jumpscare")
	po_mask_pos.x = 0
	po_mask_pos.y = 1000
	go.set_position(po_mask_pos,"/puted_on_musk")

	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "disable")

	msg.post("/scripts#Menu", "enable")
end

function continue_game()
	start_new_game()

end

function start_new_game()
	msg.post("/jumpscare", "disable")
	msg.post("/puted_on_musk", "enable")

	msg.post("/scripts#Menu", "disable")
	init_collections()
end

function options()

end

function exit_from_game()
	sys.exit(0)
end